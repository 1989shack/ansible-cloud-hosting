# See: http://docs.docker.com/articles/https/

- name: creates directories
  file: 
    state: directory
    path: "{{ swarm.tls.dir }}"
    mode: 0400
    owner: root
  with_items:
    - "{{ swarm.tls.dir }}"


- name: uploads certifications
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0400
    owner: root
  with_items:
    - { src: "certs/ca/ca.pem", dest: "{{ swarm.tls.ca.cert_file }}" }
    - { src: "certs/ca/ca-key.pem", dest: "{{ swarm.tls.ca.key_file }}" }
  # restart docker if certifications changes
  notify: restart swarm-manager


- name: generates RSA private key
  command: "openssl genrsa -out {{ swarm.tls.client.key_file }} 4096"
  args:
    chdir: "{{ swarm.tls.dir }}"
    creates: "{{ swarm.tls.client.key_file }}"
  # restart docker if key changes
  notify: restart swarm-manager


- name: creates certificate signing request
  command: "openssl req -subj '/CN={{ ansible_fqdn }}' -sha256 -new -key {{ swarm.tls.client.key_file }} -out {{ swarm.tls.dir }}/client.csr"
  args:
    chdir: "{{ swarm.tls.dir }}"
    creates: "{{ swarm.tls.dir }}/client.csr"


- name: uploads 'extfile.cnf' configuration file
  template:
    src: "tls/extfile.cnf.j2"
    dest: "{{ swarm.tls.dir }}/extfile.cnf"


- name: generates certificate
  command: "openssl x509 -req -days 365 -sha256 -in {{ swarm.tls.dir }}/client.csr -CA {{ swarm.tls.ca.cert_file }} -CAkey {{ swarm.tls.ca.key_file }} -CAcreateserial -out {{ swarm.tls.client.cert_file }} -extfile {{ swarm.tls.dir }}/extfile.cnf -passin 'pass:{{ certs.ca.password }}'"
  args:
    chdir: "{{ swarm.tls.dir }}"
    creates: "{{ swarm.tls.client.cert_file }}"
  # restart docker if certificate changes
  notify: restart swarm-manager


- name: retrieves and launches 'Docker Swarm' image
  docker: 
    image: library/swarm:latest
    ports:
      - "{{ ansible_eth0.ipv4.address }}:8000:2375"
    volumes:
      - "{{ swarm.tls.dir }}:{{ swarm.tls.dir }}" # tls
    hostname: "{{ ansible_hostname }}"
    name: docker-swarm-manager
    command: "manage --tlsverify --tlscacert={{ swarm.tls.ca.cert_file }} --tlscert={{ swarm.tls.client.cert_file }} --tlskey={{ swarm.tls.client.key_file }} token://{{ docker_swarm.token }}"
    # try to restart if the container exits
    restart_policy: always
    # it will try to restart 3 times before giving up
    restart_policy_retry: 3
    state: started


- name: fetches certificates
  fetch:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    flat: yes
  with_items:
    - { src: "{{ swarm.tls.client.cert_file }}", dest: "certs/docker/cert.pem" }
    - { src: "{{ swarm.tls.client.key_file }}", dest: "certs/docker/key.pem" }


